@startuml
left to right direction

class Node {
    -HashMap<String, String> attributes
    ~double cost
    +void add(String, String)
    +String get(String)
    +<<override>> int compare(Node, Node)
}

class Edge {
    ~Node N1
    ~Node N2
    ~double weight
    +Edge(Node, Node, double)
}

class Graph {
    -HashMap<Node, List<Edge>> graph
    +PathFinder path
    +void addNode(Node)
    +void removeNode(Node)
    +void addEdge(Edge)
    +void removeEdge(Edge)
    +List<Node> getNodes()
    +List<Edge> getEdges()
}

class PathFinder {
    -HashMap<Node, List<Edge>> graph
    +PathFinder(HashMap<Node, List<Edge>>)
    +List<Node> findPath(Node, Node)
    -void resetNodeCost()
    -HashMap<Node, Node> dijkstraShortestPath(Node)
}

interface ShortestPath {
    +List<Node> findPath(Node, Node)
    +HashMap<Node, Node> dijkstraShortestPath(Node s);
}

Node o-- Graph
Edge o-- Graph
ShortestPath <|.. PathFinder
Node *-- Edge
Graph *-- PathFinder
Node -- PathFinder
Edge -- PathFinder

@enduml