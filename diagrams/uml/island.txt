@startuml
left to right direction

package island {

    package configuration {

        class Configuration {
            -CommandLine cmd
            +Configuration(String[])
            -void printHelpMessage()
            +String export(String)
            -Options initializeOptions()
        }

        class MeshConfiguration {
            -Configuration config
            -Random rnd
            -String genSeed
            +MeshConfiguration(String[])
            +String generateIsland()
            -Mesh mutateMesh(Mesh, List<Tile>, River[])
        }

        MeshConfiguration *-- Configuration

    }

    package generators {

        class AltitudeGen {
            +List<Tile> transform(Mesh, List<Tile>, AltitudeData, Random)
        }

        class AquiferGen {
            +List<Tile> transform(Mesh, List<Tile>, int, Random)
            -List<Integer> getValidPolygonIdxs(Mesh, List<Tile>)
        }

        class BiomesGen {
            +List<Tile> transform(List<Tile>, String)
        }

        class EnrichmentGen {
            +List<Tile> enrichLand(Mesh, List<Tile> River[], double[])
        }

        class HeatmapGen {
            +List<Tile> transform(List<Tile>, String)
            -Color fetchColor(double, double, double)
        }

        class LagoonGen {
            -int width
            -int height
            -int lagoonRadius
            -int landRadius
            +Mesh.Builder transform(Mesh)
        }

        class LakeGen {
            +List<Tile> transform(Mesh, List<Tile>, int, Random)
            -List<Integer> getValidPolygonIdxs(Mesh, List<Tile>)
            -Tile createLakeTile(Tile)
        }

        class LandGen {
            +List<Tile> createLand(Mesh, Path2D)
        }

        class RiverGen {
            +River[] createRivers(Mesh, List<Tile>, int, Random)
            -List<Integer> getValidPolygonIdxs(Mesh, List<Tile>)
            -int findLowestTile(Mesh, List<Tile>, int, Vertex)
            -int findConnectingSegment(Mesh, Polygon, Vertex)
        }

        AltitudeGen o-- MeshConfiguration
        AquiferGen o-- MeshConfiguration
        BiomesGen o-- MeshConfiguration
        EnrichmentGen o-- MeshConfiguration
        LagoonGen o-- MeshConfiguration
        LakeGen o-- MeshConfiguration
        LandGen o-- MeshConfiguration
        RiverGen o-- MeshConfiguration
        HeatmapGen o-- MeshConfiguration

    }

    package biomes {

        class Arctic {
            -String name
            -Arctic(String)
            +String toString()
        }
        
        class Biome {
            +String name
            +String toString()
        }

        class Biomes {
            -String name
            -Biomes(String)
            +String toString()
        }

        class Desert {
            -String name
            -Desert(String)
            +String toString()
        }

        class Temperate {
            -String name
            -Temperate(String)
            +String toString()
        }

        class Tropical {
            -String name
            -Tropical(String)
            +String toString()
        }

        Biomes <.. Biome
        Biome <.. Arctic
        Biome <.. Desert
        Biome <.. Temperate
        Biome <.. Tropical
        
    }

    package profiles {

        package altitude {

            interface AltitudeProfile {
                +List<Coordinate> buildCoordinates(double, double, int)
                +AltitudeData build(double, double, int, double, double)
            }

            class AltitudeData {
                -List<Coordinate> coords
                -double maxAltitude
                -double steepnessFactor
                +AltitudeData(List<Coordinate>, double, double)
                +List<Coordinate> getCoords()
                +double getMaxAltitude()
                +double getSteepnessFactor()
            }

            class CornerMountains {
                +List<Coordinate> buildCoordinates(double, double, int)
                +AltitudeData build(double, double, int, double, double)
            }

            class Hills {
                +List<Coordinate> buildCoordinates(double, double, int)
                +AltitudeData build(double, double, int, double, double)
            }

            class Volcano {
                +List<Coordinate> buildCoordinates(double, double, int)
                +AltitudeData build(double, double, int, double, double)
            }

            AltitudeProfile <|.. CornerMountains
            AltitudeProfile <|.. Volcano
            AltitudeData <.. CornerMountains
            AltitudeData <.. Hills
            AltitudeData <.. Volcano

        }

        package profiles.biomes {
        
            class ArcticBiome {
                +List<Tile> transform(List<Tile)
            }

            class DesertBiome {
                +List<Tile> transform(List<Tile)
            }

            class TemperateBiome {
                +List<Tile> transform(List<Tile)
            }

            class TropicalBiome {
                +List<Tile> transform(List<Tile)
            }

            ArcticBiome -- Arctic
            DesertBiome -- Desert
            TemperateBiome -- Temperate
            TropicalBiome -- Tropical

        }

        package soil {

            interface SoilProfile {
                +double[] defineComposition()
            }

            class Dry {
                -double[] composition
                +double[] defineComposition()
            }

            class Wet {
                -double[] composition
                +double[] defineComposition()
            }

            SoilProfile <|.. Dry
            SoilProfile <|.. Wet

        }

    }
    
    package shapes {

        class Shape {
            +Path2D build(List<Coordinate)
            +Path2D build(Ellipse2D)
        }

        class Ellipse {
            +Ellipse2D generateEllipse(double, double, double, double)
        }

        class Rectangle {
            +List<Coordinate> generateRectangle(double, double, double, double)
        }

        Shape <|-- Ellipse
        Shape <|-- Rectangle

    }

    package Tile {

        class Tile {
            -Type type
            -Color color
            -double altitude
            -double humidity
            -Biome biome
            +Tile(Type, Color)
            +Tile(Type, Color, double)
            +void setBiome(Biome)
            +String getType()
            +String getColor()
            +void setColor(Color)
            +double getAltitude()
            +void setAltitude(double)
            +double getHumidity
            +void setHumidity(double)
        }

        enum Biome {
            -String name
            -Biome(String)
            +<<override>> String toString()
        }

        enum Type {
            -String name
            -Type(String)
            +<<override>> String toString()
        }

        class River {
            -Color color
            -double discharge
            -double humidity
            +River(double)
            +String getColor()
            +double getHumidity()
            +double getDischarge()
            +void setDischarge(int)
        }

        Tile *-- Type
        Tile *-- Biome
        River *-- RiverGen

    }

    package Tiles {

        class LandTile {
            -double moisture
            -double vegetation
            +LandTile()
            +LandTile(double)
            +double getMoisture
            +void setMoisture(double)
            +double getVegetation()
            -void adjustVegetation()
        }

        Tile <|-- LandTile

    }

    AltitudeData o-- AltitudeGen
    Biomes <.. BiomesGen
    Dry <.. EnrichmentGen
    Wet <.. EnrichmentGen
    Shape <.. LandGen

    Tile o-- generators

}

@enduml